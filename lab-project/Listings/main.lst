


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ********
    2 00000000         ; Program section           
    3 00000000         ;*******************************************************
                       ********
    4 00000000 20000700 
                       Memory_Battleship
                               EQU              0x20000700
    5 00000000 20000800 
                       Memory_Civilianship
                               EQU              0x20000800
    6 00000000         ;LABEL  DIRECTIVE VALUE   COMMENT
    7 00000000                 AREA             |.text|, READONLY, CODE
    8 00000000                 THUMB
    9 00000000         
   10 00000000         gameplayBorder
   11 00000000         ; 2_xxxx.xxxx (data content)
   12 00000000 00 00 00 
              00 00 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[0,13]
   13 0000000E 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[14,27]
   14 0000001C 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[28,41]
   15 0000002A 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[42,55]
   16 00000038 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[56,69]
   17 00000046 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 0:[70,83]



ARM Macro Assembler    Page 2 


   18 00000054         
   19 00000054 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[0,13]
   20 00000062 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[14,27]
   21 00000070 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[28,41]
   22 0000007E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[42,55]
   23 0000008C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 1:[56,69]
   24 0000009A 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[70,83]
   25 000000A8         
   26 000000A8 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[0,13]
   27 000000B6 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[14,27]
   28 000000C4 00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[28,41]
   29 000000D2 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[42,55]
   30 000000E0 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 2:[56,69]
   31 000000EE 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[70,83]
   32 000000FC         
   33 000000FC 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[0,13]
   34 0000010A 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[14,27]
   35 00000118 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[28,41]
   36 00000126 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[42,55]
   37 00000134 00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 3:[56,69]
   38 00000142 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[70,83]
   39 00000150         
   40 00000150 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[0,13]
   41 0000015E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[14,27]
   42 0000016C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[28,41]
   43 0000017A 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[42,55]
   44 00000188 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 3:[56,69]
   45 00000196 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[70,83]
   46 000001A4         
   47 000001A4 00 00 00 
              00 00 01 
              01 01 01 
              01 01 01 



ARM Macro Assembler    Page 5 


              01 01            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[0,13]
   48 000001B2 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[14,27]
   49 000001C0 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[28,41]
   50 000001CE 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[42,55]
   51 000001DC 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[56,69]
   52 000001EA 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 0:[70,83]
   53 000001F8         
   54 000001F8 2B 04   MSG_Cursor
                               DCB              "+",0x04
   55 000001FA 5B 04   MSG_Battleship
                               DCB              "[",0x04
   56 000001FC 7B 04   MSG_Civilianship
                               DCB              "{",0x04
   57 000001FE 20 04   MSG_Clear_Cursor
                               DCB              " ",0x04
   58 00000200 45 45 34 
              34 37 20 
              20 20 20 
              20 20 20 
              20 20 4C 
              61 62 20 
              50 72 6F 
              6A 65 63 
              74 20 20 
              20 42 75 
              72 6B 61 
              79 20 55 



ARM Macro Assembler    Page 6 


              6E 73 61 
              6C 20 20 
              45 72 64 
              65 6D 20 
              54 75 6E 
              61 20 04 MSG_InitialRun
                               DCB              "EE447         Lab Project   Bu
rkay Unsal  Erdem Tuna ",0x04
   59 00000236 50 6C 61 
              63 65 20 
              74 68 65 
              20 73 68 
              69 70 61 
              66 74 65 
              72 20 62 
              6F 72 64 
              65 72 20 
              20 69 73 
              20 76 69 
              73 69 62 
              6C 65 2E 
              04       MSG_Welcome
                               DCB              "Place the shipafter border  is
 visible.",0x04
   60 0000025E 57 61 69 
              74 69 6E 
              67 20 66 
              6F 72 20 
              20 20 20 
              20 20 75 
              73 65 72 
              32 20 74 
              6F 20 70 
              72 65 73 
              73 20 62 
              6F 74 68 
              20 62 75 
              74 74 6F 
              6E 73 2E 
              04       MSG_WaitUser2
                               DCB              "Waiting for      user2 to pres
s both buttons.",0x04
   61 0000028C         
   62 0000028C         ;----------------------------------
   63 0000028C         ; Screen functions
   64 0000028C         ;----------------------------------
   65 0000028C                 EXTERN           Nokia_Init
   66 0000028C                 EXTERN           OutImgNokia
   67 0000028C                 EXTERN           SetCoordinate
   68 0000028C                 EXTERN           TxByte
   69 0000028C                 EXTERN           OutStrNokia
   70 0000028C                 EXTERN           ClearNokia
   71 0000028C         ;----------------------------------
   72 0000028C         ; ADC functions
   73 0000028C         ;----------------------------------
   74 0000028C                 EXTERN           ADC_1_Read_Y
   75 0000028C                 EXTERN           ADC_0_Read_X
   76 0000028C                 EXTERN           Find_Pixel_Coordinate
   77 0000028C                 EXTERN           ADC_Init



ARM Macro Assembler    Page 7 


   78 0000028C         ;----------------------------------
   79 0000028C         ; PORT-F Button functions
   80 0000028C         ;----------------------------------
   81 0000028C                 EXTERN           PortF_Button_Init
   82 0000028C                 EXTERN           Check_Interrupt_Status
   83 0000028C                 EXTERN           Clear_Interrupt_Status
   84 0000028C         
   85 0000028C                 EXPORT           Start
   86 0000028C         
   87 0000028C         Start
   88 0000028C F7FF FFFE       BL               Nokia_Init  ; initialize LCD
   89 00000290 F7FF FFFE       BL               ADC_Init    ; initialize ADC
   90 00000294 F7FF FFFE       BL               PortF_Button_Init ; initialize 
                                                            buttons
   91 00000298 E7FF            B                Clear_Ship_Memories ; clear shi
                                                            p memories
   92 0000029A         
   93 0000029A         Clear_Ship_Memories
   94 0000029A F04F 0204       MOV              R2, #4      ; counter to clear 
                                                            16 bytes
   95 0000029E 4B82            LDR              R3, = Memory_Battleship ; battl
                                                            eship memory addres
                                                            s
   96 000002A0         Clear_Battleship_Memory
   97 000002A0 F04F 0400       MOV              R4, #0x00000000
   98 000002A4 F843 4B04       STR              R4, [R3], #4
   99 000002A8 3A01            SUBS             R2, #1
  100 000002AA D1F9            BNE              Clear_Battleship_Memory
  101 000002AC         
  102 000002AC F04F 0204       MOV              R2, #4      ; counter to clear 
                                                            16 bytes
  103 000002B0 4B7E            LDR              R3, = Memory_Civilianship ; bat
                                                            tleship memory addr
                                                            ess
  104 000002B2         Clear_Civilianship_Memory
  105 000002B2 F04F 0400       MOV              R4, #0x00000000
  106 000002B6 F843 4B04       STR              R4, [R3], #4
  107 000002BA 3A01            SUBS             R2, #1
  108 000002BC D1F9            BNE              Clear_Civilianship_Memory
  109 000002BE         
  110 000002BE         
  111 000002BE         loadRam
  112 000002BE         
  113 000002BE         ; output initial first run messages
  114 000002BE         Initial_Messages
  115 000002BE F04F 0000       MOV              R0, #0
  116 000002C2 F04F 0101       MOV              R1, #1
  117 000002C6 F7FF FFFE       BL               SetCoordinate
  118 000002CA 4D79            LDR              R5,=MSG_InitialRun
  119 000002CC F7FF FFFE       BL               OutStrNokia
  120 000002D0         ;BL delay
  121 000002D0 F7FF FFFE       BL               ClearNokia
  122 000002D4 F04F 0000       MOV              R0, #0
  123 000002D8 F04F 0101       MOV              R1, #1
  124 000002DC F7FF FFFE       BL               SetCoordinate
  125 000002E0 4D74            LDR              R5,=MSG_Welcome
  126 000002E2 F7FF FFFE       BL               OutStrNokia
  127 000002E6         ;BL delay
  128 000002E6         



ARM Macro Assembler    Page 8 


  129 000002E6         ; load game border
  130 000002E6         Load_GameBorder
  131 000002E6 4D74            LDR              R5,=gameplayBorder
  132 000002E8 F7FF FFFE       BL               OutImgNokia
  133 000002EC F04F 0A63       MOV              R10, #99    ; old x coordinate
  134 000002F0 F04F 0B63       MOV              R11, #99    ; old y coordinate 
                                                            
  135 000002F4 F04F 0200       MOV              R2, #0      ; difference counte
                                                            r
  136 000002F8 F04F 0600       MOV              R6, #0      ; ship counter
  137 000002FC         
  138 000002FC         Set_Coordinates
  139 000002FC         ;BL delayTrans
  140 000002FC F000 F876       BL               Placement_Battleship_Output ; p
                                                            rint battleships wh
                                                            ile deployment
  141 00000300 F000 F889       BL               Placement_Civilianship_Output ;
                                                             print civilianship
                                                            s while deployment
  142 00000304 F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  143 00000308 2E04            CMP              R6, #4
  144 0000030A D034            BEQ              Placement_Done
  145 0000030C F04F 0000       MOV              R0, #0      ; clear x-coordinat
                                                            e
  146 00000310 F04F 0100       MOV              R1, #0      ; clear y-coordinat
                                                            e
  147 00000314 F04F 0200       MOV              R2, #0      ; reset counter
  148 00000318 F7FF FFFE       BL               ADC_0_Read_X
  149 0000031C F04F 0338       MOV              R3, #56
  150 00000320 F7FF FFFE       BL               Find_Pixel_Coordinate 
                                                            ; x-coordinae
  151 00000324 F7FF FFFE       BL               ADC_1_Read_Y
  152 00000328 F240 3339       MOV              R3, #825
  153 0000032C F7FF FFFE       BL               Find_Pixel_Coordinate
  154 00000330 F100 0006       ADD              R0, R0, #6  ; add x axis offset
                                                            
  155 00000334 F101 0101       ADD              R1, R1, #1  ; add y axis offset
                                                            
  156 00000338 4550            CMP              R0, R10     ; check if x coordi
                                                            nate has changed
  157 0000033A BF18 3201       ADDNE            R2, #1
  158 0000033E 4559            CMP              R1, R11     ; check if y coordi
                                                            nate has changed
  159 00000340 BF18 3201       ADDNE            R2, #1
  160 00000344 2A00            CMP              R2, #0      ; if R2 == 0, then 
                                                            coordinates remaine
                                                            d same, check again
                                                            
  161 00000346         ; if R2 != 0, then at least one of the coordinates
  162 00000346         ; have changed
  163 00000346 D000            BEQ              Go_Check_Ship_Placement ; !!!!!
                                                            !!!!!!!!!!!!!!!!!!!
                                                            !!!!!!!
  164 00000348 E002            B                Clear_Old_Cursor
  165 0000034A         Go_Check_Ship_Placement
  166 0000034A F000 F81C       BL               Check_Ship_Placement
  167 0000034E E7D5            B                Set_Coordinates
  168 00000350         



ARM Macro Assembler    Page 9 


  169 00000350         ;-------------------------------------------
  170 00000350         ; Clears the position of old cursor by writing
  171 00000350         ; 0 pixels on top of it.
  172 00000350         ; Saves the new cursor coordinates
  173 00000350         ;-------------------------------------------
  174 00000350         Clear_Old_Cursor
  175 00000350 B407            PUSH{R0-R2}                  ; save new coordina
                                                            tes
  176 00000352 4650            MOV              R0, R10     ; old x coordinate
  177 00000354 4659            MOV              R1, R11     ; old y coordinate
  178 00000356 F7FF FFFE       BL               SetCoordinate
  179 0000035A 4D58            LDR              R5,=MSG_Clear_Cursor
  180 0000035C F7FF FFFE       BL               OutStrNokia
  181 00000360 BC07            POP{R0-R2}                   ; pop new coordinat
                                                            es
  182 00000362 4682            MOV              R10, R0     ; save change
  183 00000364 468B            MOV              R11, R1     ; save change
  184 00000366 F7FF FFFE       BL               SetCoordinate
  185 0000036A E7FF            B                Move_Cursor
  186 0000036C         Move_Cursor
  187 0000036C 4D54            LDR              R5,=MSG_Cursor
  188 0000036E F7FF FFFE       BL               OutStrNokia
  189 00000372         ; BL delayTrans
  190 00000372 E7C3            B                Set_Coordinates
  191 00000374 E7FE    donethis
                               B                donethis
  192 00000376         
  193 00000376         ;-------------------------------------------
  194 00000376         ; Let's user to have an overview of the
  195 00000376         ; deployed ships. No placement is allowed.
  196 00000376         ; Press both buttons to handover the turn.
  197 00000376         ; All preused registers can be reset from now on,
  198 00000376         ; because the game phase is going to change
  199 00000376         ;-------------------------------------------
  200 00000376         Placement_Done
  201 00000376 F7FF FFFE       BL               Check_Interrupt_Status ; R9 has
                                                             interrupt status
  202 0000037A F019 0911       ANDS             R9, #0x11   ; if R9 == 0x11, us
                                                            er wants handover t
                                                            o
  203 0000037E         ; other player
  204 0000037E         ; Otherwise wait for 0x11.
  205 0000037E D0FA            BEQ              Placement_Done
  206 00000380 F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  207 00000384 E05C            B                Wait_for_Second_Player
  208 00000386         
  209 00000386         ;-------------------------------------------
  210 00000386         ; Checks if a ship is to be placed
  211 00000386         ; if yes, then saves the ship to memory
  212 00000386         ; if not, returns back
  213 00000386         ;-------------------------------------------
  214 00000386         Check_Ship_Placement
  215 00000386 B500            PUSH{LR}
  216 00000388 F7FF FFFE       BL               Check_Interrupt_Status ; R9 has
                                                             interrupt status
  217 0000038C F1B9 0F00       CMP              R9, #0x00   ; if R9 == 0x00, th
                                                            ere is no ship plac
                                                            ement



ARM Macro Assembler    Page 10 


  218 00000390 D102            BNE              Determine_Ship_Type
  219 00000392 F85D EB04       POP{LR}
  220 00000396 4770            BX               LR
  221 00000398         ;-------------------------------------------
  222 00000398         ; Checks which ship type is deployed.
  223 00000398         ; Redirects to save subroutine of respective ship
  224 00000398         ;-------------------------------------------
  225 00000398         Determine_Ship_Type
  226 00000398 F106 0601       ADD              R6, R6, #1  ; increase the ship
                                                             count
  227 0000039C F1B9 0F10       CMP              R9, #0x10   ; if R9 == 0x10, pl
                                                            ace a batlleship
  228 000003A0         ; if R9 < 0x10, place a civilianship
  229 000003A0         ; if R9 > 0x10, ship placement is done
  230 000003A0 D000            BEQ              Placement_Battleship_Save
  231 000003A2 D311            BLO              Placement_Civilianship_Save
  232 000003A4         ; B Placement_Done
  233 000003A4         
  234 000003A4         ;-------------------------------------------
  235 000003A4         ; Saves the location of battleship
  236 000003A4         ;-------------------------------------------
  237 000003A4         Placement_Battleship_Save
  238 000003A4 E92D 1FFF       PUSH{R0-R12}
  239 000003A8 4B3F            LDR              R3, = Memory_Battleship
  240 000003AA         Find_Battleship_Zero_Memory
  241 000003AA F813 4B02       LDRB             R4, [R3], #2
  242 000003AE 2C00            CMP              R4, #0
  243 000003B0 D1FB            BNE              Find_Battleship_Zero_Memory
  244 000003B2 F1A3 0302       SUB              R3, R3, #2
  245 000003B6 F803 0B01       STRB             R0, [R3], #1 ; store x coordina
                                                            te of the ship
  246 000003BA F803 1B01       STRB             R1, [R3], #1 ; store y coordina
                                                            te of the ship
  247 000003BE E8BD 1FFF       POP{R0-R12}
  248 000003C2 F85D EB04       POP{LR}
  249 000003C6 4770            BX               LR          ; return to last ca
                                                            ll of Check_Ship_Pl
                                                            acement
  250 000003C8         
  251 000003C8         ;-------------------------------------------
  252 000003C8         ; Saves the location of civilianship
  253 000003C8         ;-------------------------------------------
  254 000003C8         Placement_Civilianship_Save
  255 000003C8 E92D 1FFF       PUSH{R0-R12}
  256 000003CC 4B37            LDR              R3, = Memory_Civilianship
  257 000003CE         Find_Civilianship_Zero_Memory
  258 000003CE F813 4B02       LDRB             R4, [R3], #2
  259 000003D2 2C00            CMP              R4, #0
  260 000003D4 D1FB            BNE              Find_Civilianship_Zero_Memory
  261 000003D6 F1A3 0302       SUB              R3, R3, #2
  262 000003DA F803 0B01       STRB             R0, [R3], #1 ; store x coordina
                                                            te of the ship
  263 000003DE F803 1B01       STRB             R1, [R3], #1 ; store y coordina
                                                            te of the ship
  264 000003E2 E8BD 1FFF       POP{R0-R12}
  265 000003E6 F85D EB04       POP{LR}
  266 000003EA 4770            BX               LR          ; return to last ca
                                                            ll of Check_Ship_Pl
                                                            acement



ARM Macro Assembler    Page 11 


  267 000003EC         
  268 000003EC         ;-------------------------------------------
  269 000003EC         ; Outputs all battleships
  270 000003EC         ; Returns nothing
  271 000003EC         ; If there is no ships, doesn't output at all.
  272 000003EC         ;-------------------------------------------
  273 000003EC         Placement_Battleship_Output
  274 000003EC E92D 1FFF       PUSH{R0-R12}
  275 000003F0 B500            PUSH{LR}
  276 000003F2 4B2D            LDR              R3, = Memory_Battleship ; battl
                                                            eship memory addres
                                                            s
  277 000003F4         Output_Battleship
  278 000003F4 F813 0B01       LDRB             R0, [R3], #1 ; load x coordinat
                                                            e of the ship
  279 000003F8 2800            CMP              R0, #0
  280 000003FA D007            BEQ              Placement_Battleship_Output_Ret
urn 
                                                            ; if R0 == 0, then 
                                                            it is end of battle
                                                            ships
  281 000003FC         ; return 
  282 000003FC F813 1B01       LDRB             R1, [R3], #1 ; load y coordinat
                                                            e of the ship
  283 00000400 F7FF FFFE       BL               SetCoordinate
  284 00000404 4D2F            LDR              R5, = MSG_Battleship
  285 00000406 F7FF FFFE       BL               OutStrNokia
  286 0000040A         ;BL delayTrans
  287 0000040A E7F3            B                Output_Battleship ; loop throug
                                                            h all battleships 
  288 0000040C         Placement_Battleship_Output_Return
  289 0000040C F85D EB04       POP{LR}
  290 00000410 E8BD 1FFF       POP{R0-R12}
  291 00000414 4770            BX               LR
  292 00000416         
  293 00000416         ;-------------------------------------------
  294 00000416         ; Outputs all battleships
  295 00000416         ; Returns nothing
  296 00000416         ; If there is no ships, doesn't output at all.
  297 00000416         ;-------------------------------------------
  298 00000416         Placement_Civilianship_Output
  299 00000416 E92D 1FFF       PUSH{R0-R12}
  300 0000041A B500            PUSH{LR}
  301 0000041C 4B23            LDR              R3, = Memory_Civilianship ; bat
                                                            tleship memory addr
                                                            ess
  302 0000041E         Output_Civilianship
  303 0000041E F813 0B01       LDRB             R0, [R3], #1 ; load x coordinat
                                                            e of the ship
  304 00000422 2800            CMP              R0, #0
  305 00000424 D007            BEQ              Placement_Civilianship_Output_R
eturn 
                                                            ; if R0 == 0, then 
                                                            it is end of battle
                                                            ships
  306 00000426         ; return 
  307 00000426 F813 1B01       LDRB             R1, [R3], #1 ; load y coordinat
                                                            e of the ship
  308 0000042A F7FF FFFE       BL               SetCoordinate



ARM Macro Assembler    Page 12 


  309 0000042E 4D26            LDR              R5, = MSG_Civilianship
  310 00000430 F7FF FFFE       BL               OutStrNokia
  311 00000434         ;BL delayTrans
  312 00000434 E7F3            B                Output_Civilianship ; loop thro
                                                            ugh all battleships
                                                            
  313 00000436         Placement_Civilianship_Output_Return
  314 00000436 F85D EB04       POP{LR}
  315 0000043A E8BD 1FFF       POP{R0-R12}
  316 0000043E 4770            BX               LR
  317 00000440         ;************************ SECOND PLAYER PHASE **********
                       **************
  318 00000440         Wait_for_Second_Player
  319 00000440 F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  320 00000444 F7FF FFFE       BL               ClearNokia
  321 00000448 4D20            LDR              R5, = MSG_WaitUser2 ; output pr
                                                            ompt message
  322 0000044A F7FF FFFE       BL               OutStrNokia
  323 0000044E         Wait_for_Second_Player_Interrupt
  324 0000044E F7FF FFFE       BL               Check_Interrupt_Status ; R9 has
                                                             interrupt status
  325 00000452 F1B9 0F11       CMP              R9, #0x11   ; if R9 == 0x11, us
                                                            er2 wants to start 
                                                            mine placement
  326 00000456         ; otherwise, wait for user2 to concentrate on.
  327 00000456 D1FA            BNE              Wait_for_Second_Player_Interrup
t
  328 00000458 F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  329 0000045C E7F0            B                Wait_for_Second_Player
  330 0000045E         
  331 0000045E         
  332 0000045E         
  333 0000045E         
  334 0000045E         ;   BL  delay    ; leave image for a few s
  335 0000045E         
  336 0000045E         ;   MOV       ; reset XY position to 0,0
  337 0000045E         ;   MOV       ; using setXY routine
  338 0000045E         ; BL  SetCoordinate   ; DC is left high ready to send da
                       ta
  339 0000045E         ; transition to CSU           
  340 0000045E         ; MOV  R0,#504    ; 504 bytes in full image
  341 0000045E         ; LDR  R1,=imgCSU   ; put img address in R1
  342 0000045E         sendNxtCSUByte
  343 0000045E         ;   LDRB     ; load R5 with byte, post inc addr
  344 0000045E F7FF FFFE       BL               TxByte      ; use byte routine
  345 00000462 F000 F817       BL               delayTrans  ; slow down loading
                                                             of next byte
  346 00000466 3801            SUBS             R0,#1
  347 00000468 D1F9            BNE              sendNxtCSUByte
  348 0000046A         
  349 0000046A F000 F80A       BL               delay       ; leave image for a
                                                             few s
  350 0000046E         
  351 0000046E         ;clear screen using ClearNokia routine
  352 0000046E F7FF FFFE       BL               ClearNokia
  353 00000472         
  354 00000472         



ARM Macro Assembler    Page 13 


  355 00000472         ;   MOV       ; X pos (0-83)
  356 00000472         ;   MOV       ; Y pos (0-5)
  357 00000472 F7FF FFFE       BL               SetCoordinate ; set XY position
                                                            
  358 00000476 4D12            LDR              R5,=MSG_Cursor
  359 00000478 F7FF FFFE       BL               OutStrNokia
  360 0000047C         
  361 0000047C F000 F801       BL               delay       ; leave text up
  362 00000480         
  363 00000480 E71D    done    B                loadRam     ; loop   
  364 00000482         
  365 00000482         
  366 00000482         delay
  367 00000482 B401            PUSH             {R0}
  368 00000484 F248 5055       MOV              R0,#0x8555
  369 00000488 F2C0 1040       MOVT             R0,#0x0140
  370 0000048C         del
  371 0000048C 3801            SUBS             R0,#1
  372 0000048E D1FD            BNE              del
  373 00000490 BC01            POP              {R0}
  374 00000492 4770            BX               LR
  375 00000494         
  376 00000494 B401    delayTrans
                               PUSH             {R0}
  377 00000496 F240 3055       MOV              R0,#0x355   ;~250ms, 0x5855
  378 0000049A F2C0 0014       MOVT             R0,#0x0014
  379 0000049E         dt
  380 0000049E 3801            SUBS             R0,#1
  381 000004A0 D1FD            BNE              dt
  382 000004A2 BC01            POP              {R0}
  383 000004A4 4770            BX               LR
  384 000004A6         
  385 000004A6         
  386 000004A6 00 00           ALIGN
  387 000004A8                 END
              20000700 
              20000800 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_EE447-Project -ID:
\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -ID:\Keil_v5\ARM\C
MSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 52
6" --predefine="TM4C123GH6PM SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 7 in file main.s
   Uses
      None
Comment: .text unused
Check_Ship_Placement 00000386

Symbol: Check_Ship_Placement
   Definitions
      At line 214 in file main.s
   Uses
      At line 166 in file main.s
Comment: Check_Ship_Placement used once
Clear_Battleship_Memory 000002A0

Symbol: Clear_Battleship_Memory
   Definitions
      At line 96 in file main.s
   Uses
      At line 100 in file main.s
Comment: Clear_Battleship_Memory used once
Clear_Civilianship_Memory 000002B2

Symbol: Clear_Civilianship_Memory
   Definitions
      At line 104 in file main.s
   Uses
      At line 108 in file main.s
Comment: Clear_Civilianship_Memory used once
Clear_Old_Cursor 00000350

Symbol: Clear_Old_Cursor
   Definitions
      At line 174 in file main.s
   Uses
      At line 164 in file main.s
Comment: Clear_Old_Cursor used once
Clear_Ship_Memories 0000029A

Symbol: Clear_Ship_Memories
   Definitions
      At line 93 in file main.s
   Uses
      At line 91 in file main.s
Comment: Clear_Ship_Memories used once
Determine_Ship_Type 00000398

Symbol: Determine_Ship_Type
   Definitions
      At line 225 in file main.s
   Uses
      At line 218 in file main.s
Comment: Determine_Ship_Type used once
Find_Battleship_Zero_Memory 000003AA

Symbol: Find_Battleship_Zero_Memory



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 240 in file main.s
   Uses
      At line 243 in file main.s
Comment: Find_Battleship_Zero_Memory used once
Find_Civilianship_Zero_Memory 000003CE

Symbol: Find_Civilianship_Zero_Memory
   Definitions
      At line 257 in file main.s
   Uses
      At line 260 in file main.s
Comment: Find_Civilianship_Zero_Memory used once
Go_Check_Ship_Placement 0000034A

Symbol: Go_Check_Ship_Placement
   Definitions
      At line 165 in file main.s
   Uses
      At line 163 in file main.s
Comment: Go_Check_Ship_Placement used once
Initial_Messages 000002BE

Symbol: Initial_Messages
   Definitions
      At line 114 in file main.s
   Uses
      None
Comment: Initial_Messages unused
Load_GameBorder 000002E6

Symbol: Load_GameBorder
   Definitions
      At line 130 in file main.s
   Uses
      None
Comment: Load_GameBorder unused
MSG_Battleship 000001FA

Symbol: MSG_Battleship
   Definitions
      At line 55 in file main.s
   Uses
      At line 284 in file main.s
Comment: MSG_Battleship used once
MSG_Civilianship 000001FC

Symbol: MSG_Civilianship
   Definitions
      At line 56 in file main.s
   Uses
      At line 309 in file main.s
Comment: MSG_Civilianship used once
MSG_Clear_Cursor 000001FE

Symbol: MSG_Clear_Cursor
   Definitions
      At line 57 in file main.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 179 in file main.s
Comment: MSG_Clear_Cursor used once
MSG_Cursor 000001F8

Symbol: MSG_Cursor
   Definitions
      At line 54 in file main.s
   Uses
      At line 187 in file main.s
      At line 358 in file main.s

MSG_InitialRun 00000200

Symbol: MSG_InitialRun
   Definitions
      At line 58 in file main.s
   Uses
      At line 118 in file main.s
Comment: MSG_InitialRun used once
MSG_WaitUser2 0000025E

Symbol: MSG_WaitUser2
   Definitions
      At line 60 in file main.s
   Uses
      At line 321 in file main.s
Comment: MSG_WaitUser2 used once
MSG_Welcome 00000236

Symbol: MSG_Welcome
   Definitions
      At line 59 in file main.s
   Uses
      At line 125 in file main.s
Comment: MSG_Welcome used once
Move_Cursor 0000036C

Symbol: Move_Cursor
   Definitions
      At line 186 in file main.s
   Uses
      At line 185 in file main.s
Comment: Move_Cursor used once
Output_Battleship 000003F4

Symbol: Output_Battleship
   Definitions
      At line 277 in file main.s
   Uses
      At line 287 in file main.s
Comment: Output_Battleship used once
Output_Civilianship 0000041E

Symbol: Output_Civilianship
   Definitions
      At line 302 in file main.s
   Uses
      At line 312 in file main.s
Comment: Output_Civilianship used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Placement_Battleship_Output 000003EC

Symbol: Placement_Battleship_Output
   Definitions
      At line 273 in file main.s
   Uses
      At line 140 in file main.s
Comment: Placement_Battleship_Output used once
Placement_Battleship_Output_Return 0000040C

Symbol: Placement_Battleship_Output_Return
   Definitions
      At line 288 in file main.s
   Uses
      At line 280 in file main.s
Comment: Placement_Battleship_Output_Return used once
Placement_Battleship_Save 000003A4

Symbol: Placement_Battleship_Save
   Definitions
      At line 237 in file main.s
   Uses
      At line 230 in file main.s
Comment: Placement_Battleship_Save used once
Placement_Civilianship_Output 00000416

Symbol: Placement_Civilianship_Output
   Definitions
      At line 298 in file main.s
   Uses
      At line 141 in file main.s
Comment: Placement_Civilianship_Output used once
Placement_Civilianship_Output_Return 00000436

Symbol: Placement_Civilianship_Output_Return
   Definitions
      At line 313 in file main.s
   Uses
      At line 305 in file main.s
Comment: Placement_Civilianship_Output_Return used once
Placement_Civilianship_Save 000003C8

Symbol: Placement_Civilianship_Save
   Definitions
      At line 254 in file main.s
   Uses
      At line 231 in file main.s
Comment: Placement_Civilianship_Save used once
Placement_Done 00000376

Symbol: Placement_Done
   Definitions
      At line 200 in file main.s
   Uses
      At line 144 in file main.s
      At line 205 in file main.s

Set_Coordinates 000002FC




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: Set_Coordinates
   Definitions
      At line 138 in file main.s
   Uses
      At line 167 in file main.s
      At line 190 in file main.s

Start 0000028C

Symbol: Start
   Definitions
      At line 87 in file main.s
   Uses
      At line 85 in file main.s
Comment: Start used once
Wait_for_Second_Player 00000440

Symbol: Wait_for_Second_Player
   Definitions
      At line 318 in file main.s
   Uses
      At line 207 in file main.s
      At line 329 in file main.s

Wait_for_Second_Player_Interrupt 0000044E

Symbol: Wait_for_Second_Player_Interrupt
   Definitions
      At line 323 in file main.s
   Uses
      At line 327 in file main.s
Comment: Wait_for_Second_Player_Interrupt used once
del 0000048C

Symbol: del
   Definitions
      At line 370 in file main.s
   Uses
      At line 372 in file main.s
Comment: del used once
delay 00000482

Symbol: delay
   Definitions
      At line 366 in file main.s
   Uses
      At line 349 in file main.s
      At line 361 in file main.s

delayTrans 00000494

Symbol: delayTrans
   Definitions
      At line 376 in file main.s
   Uses
      At line 345 in file main.s
Comment: delayTrans used once
done 00000480




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: done
   Definitions
      At line 363 in file main.s
   Uses
      None
Comment: done unused
donethis 00000374

Symbol: donethis
   Definitions
      At line 191 in file main.s
   Uses
      At line 191 in file main.s
Comment: donethis used once
dt 0000049E

Symbol: dt
   Definitions
      At line 379 in file main.s
   Uses
      At line 381 in file main.s
Comment: dt used once
gameplayBorder 00000000

Symbol: gameplayBorder
   Definitions
      At line 10 in file main.s
   Uses
      At line 131 in file main.s
Comment: gameplayBorder used once
loadRam 000002BE

Symbol: loadRam
   Definitions
      At line 111 in file main.s
   Uses
      At line 363 in file main.s
Comment: loadRam used once
sendNxtCSUByte 0000045E

Symbol: sendNxtCSUByte
   Definitions
      At line 342 in file main.s
   Uses
      At line 347 in file main.s
Comment: sendNxtCSUByte used once
42 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Memory_Battleship 20000700

Symbol: Memory_Battleship
   Definitions
      At line 4 in file main.s
   Uses
      At line 95 in file main.s
      At line 239 in file main.s
      At line 276 in file main.s

Memory_Civilianship 20000800

Symbol: Memory_Civilianship
   Definitions
      At line 5 in file main.s
   Uses
      At line 103 in file main.s
      At line 256 in file main.s
      At line 301 in file main.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ADC_0_Read_X 00000000

Symbol: ADC_0_Read_X
   Definitions
      At line 75 in file main.s
   Uses
      At line 148 in file main.s
Comment: ADC_0_Read_X used once
ADC_1_Read_Y 00000000

Symbol: ADC_1_Read_Y
   Definitions
      At line 74 in file main.s
   Uses
      At line 151 in file main.s
Comment: ADC_1_Read_Y used once
ADC_Init 00000000

Symbol: ADC_Init
   Definitions
      At line 77 in file main.s
   Uses
      At line 89 in file main.s
Comment: ADC_Init used once
Check_Interrupt_Status 00000000

Symbol: Check_Interrupt_Status
   Definitions
      At line 82 in file main.s
   Uses
      At line 201 in file main.s
      At line 216 in file main.s
      At line 324 in file main.s

ClearNokia 00000000

Symbol: ClearNokia
   Definitions
      At line 70 in file main.s
   Uses
      At line 121 in file main.s
      At line 320 in file main.s
      At line 352 in file main.s

Clear_Interrupt_Status 00000000

Symbol: Clear_Interrupt_Status
   Definitions
      At line 83 in file main.s
   Uses
      At line 142 in file main.s
      At line 206 in file main.s
      At line 319 in file main.s
      At line 328 in file main.s

Find_Pixel_Coordinate 00000000

Symbol: Find_Pixel_Coordinate
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 76 in file main.s
   Uses
      At line 150 in file main.s
      At line 153 in file main.s

Nokia_Init 00000000

Symbol: Nokia_Init
   Definitions
      At line 65 in file main.s
   Uses
      At line 88 in file main.s
Comment: Nokia_Init used once
OutImgNokia 00000000

Symbol: OutImgNokia
   Definitions
      At line 66 in file main.s
   Uses
      At line 132 in file main.s
Comment: OutImgNokia used once
OutStrNokia 00000000

Symbol: OutStrNokia
   Definitions
      At line 69 in file main.s
   Uses
      At line 119 in file main.s
      At line 126 in file main.s
      At line 180 in file main.s
      At line 188 in file main.s
      At line 285 in file main.s
      At line 310 in file main.s
      At line 322 in file main.s
      At line 359 in file main.s

PortF_Button_Init 00000000

Symbol: PortF_Button_Init
   Definitions
      At line 81 in file main.s
   Uses
      At line 90 in file main.s
Comment: PortF_Button_Init used once
SetCoordinate 00000000

Symbol: SetCoordinate
   Definitions
      At line 67 in file main.s
   Uses
      At line 117 in file main.s
      At line 124 in file main.s
      At line 178 in file main.s
      At line 184 in file main.s
      At line 283 in file main.s
      At line 308 in file main.s
      At line 357 in file main.s

TxByte 00000000



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols


Symbol: TxByte
   Definitions
      At line 68 in file main.s
   Uses
      At line 344 in file main.s
Comment: TxByte used once
13 symbols
393 symbols in table
