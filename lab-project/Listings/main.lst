


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ********
    2 00000000         ; Program section           
    3 00000000         ;*******************************************************
                       ********
    4 00000000 20000700 
                       Memory_Battleship
                               EQU              0x20000700
    5 00000000 20000734 
                       Memory_Civilianship
                               EQU              0x20000734
    6 00000000 20000768 
                       Memory_Mine
                               EQU              0x20000768
    7 00000000 2000079C 
                       Memory_TimerFinish
                               EQU              0x2000079C
    8 00000000 40025044 
                       GPIO_PORTF_DATA_R
                               EQU              0x40025044
    9 00000000         ;LABEL  DIRECTIVE VALUE   COMMENT
   10 00000000                 AREA             |.text|, READONLY, CODE
   11 00000000                 THUMB
   12 00000000         
   13 00000000         gameplayBorder
   14 00000000         ; 2_xxxx.xxxx (data content)
   15 00000000 00 00 00 
              00 00 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[0,13]
   16 0000000E 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[14,27]
   17 0000001C 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[28,41]
   18 0000002A 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0
x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[42,55]
   19 00000038 80 80 80 
              80 80 80 
              80 80 80 
              80 80 80 
              80 80            DCB              0x80, 0x80, 0x80, 0x80, 0x80, 0



ARM Macro Assembler    Page 2 


x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 
                                                            ; 0:[56,69]
   20 00000046 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 0:[70,83]
   21 00000054         
   22 00000054 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[0,13]
   23 00000062 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[14,27]
   24 00000070 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[28,41]
   25 0000007E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[42,55]
   26 0000008C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 1:[56,69]
   27 0000009A 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 1:[70,83]
   28 000000A8         
   29 000000A8 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 



ARM Macro Assembler    Page 3 


                                                            ; 2:[0,13]
   30 000000B6 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[14,27]
   31 000000C4 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[28,41]
   32 000000D2 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[42,55]
   33 000000E0 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 2:[56,69]
   34 000000EE 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 2:[70,83]
   35 000000FC         
   36 000000FC 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[0,13]
   37 0000010A 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[14,27]
   38 00000118 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[28,41]
   39 00000126 00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[42,55]
   40 00000134 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 3:[56,69]
   41 00000142 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[70,83]
   42 00000150         
   43 00000150 00 00 00 
              00 00 FF 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[0,13]
   44 0000015E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[14,27]
   45 0000016C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[28,41]
   46 0000017A 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[42,55]
   47 00000188 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 FF            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff 
                                                            ; 3:[56,69]
   48 00000196 00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 3:[70,83]
   49 000001A4         
   50 000001A4 00 00 00 
              00 00 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[0,13]
   51 000001B2 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[14,27]
   52 000001C0 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[28,41]
   53 000001CE 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[42,55]
   54 000001DC 01 01 01 
              01 01 01 
              01 01 01 
              01 01 01 
              01 01            DCB              0x01, 0x01, 0x01, 0x01, 0x01, 0
x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
                                                            ; 0:[56,69]
   55 000001EA 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            DCB              0x00, 0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                                            ; 0:[70,83]
   56 000001F8         
   57 000001F8 2B 04   MSG_Cursor
                               DCB              "+",0x04
   58 000001FA 5B 04   MSG_Battleship
                               DCB              "[",0x04
   59 000001FC 7B 04   MSG_Civilianship
                               DCB              "{",0x04
   60 000001FE 2A 04   MSG_Mine
                               DCB              "*",0x04
   61 00000200 20 04   MSG_Clear_Cursor
                               DCB              " ",0x04
   62 00000202 45 45 34 



ARM Macro Assembler    Page 6 


              34 37 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 4C 
              61 62 20 
              50 72 6F 
              6A 65 63 
              74 20 20 
              20 20 20 
              20 42 75 
              72 6B 61 
              79 20 55 
              6E 73 61 
              6C 20 20 
              20 20 20 
              45 72 64 
              65 6D 20 
              54 75 6E 
              61 04    MSG_InitialRun
                               DCB              "EE447            Lab Project  
    Burkay Unsal     Erdem Tuna",0x04
   63 00000240 50 6C 61 
              63 65 20 
              74 68 65 
              20 73 68 
              69 70 20 
              20 20 61 
              66 74 65 
              72 20 62 
              6F 72 64 
              65 72 20 
              69 73 20 
              20 76 69 
              73 69 62 
              6C 65 2E 
              04       MSG_Welcome
                               DCB              "Place the ship   after border 
is  visible.",0x04
   64 0000026B 57 61 69 
              74 69 6E 
              67 20 66 
              6F 72 20 
              20 20 20 
              20 20 70 
              6C 61 79 
              65 72 32 
              20 74 6F 
              20 70 72 
              65 73 73 
              20 62 75 
              74 74 6F 
              6E 73 2E 
              20 20 20 
              20 20 20 
              20 20 20 
              20 2D 2D 
              2D 2D 2D 
              2D 2D 2D 



ARM Macro Assembler    Page 7 


              2D 2D 2D 
              2D 2D 2D 
              2D 20 50 
              6C 61 63 
              65 20 34 
              20 6D 69 
              6E 65 73 
              2E 04    MSG_WaitUser2
                               DCB              "Waiting for      player2 to pr
ess buttons.          --------------- Place 4 mines.",0x04
   65 000002BE 46 61 69 
              6C 20 46 
              61 69 6C 
              20 46 61 
              69 6C 20 
              20 20 4E 
              6F 20 54 
              69 6D 65 
              20 74 6F 
              20 48 61 
              69 6C 21 
              04       MSG_FAIL
                               DCB              "Fail Fail Fail   No Time to Ha
il!",0x04
   66 000002E0 48 61 69 
              6C 20 43 
              6F 6D 6D 
              61 6E 64 
              65 72 21 
              04       MSG_WIN DCB              "Hail Commander!",0x04
   67 000002F0 54 69 6D 
              65 20 69 
              73 20 55 
              70 21 04 MSG_TimerFinish
                               DCB              "Time is Up!",0x04
   68 000002FC         
   69 000002FC         ;----------------------------------
   70 000002FC         ; Screen functions
   71 000002FC         ;----------------------------------
   72 000002FC                 EXTERN           Nokia_Init
   73 000002FC                 EXTERN           OutImgNokia
   74 000002FC                 EXTERN           SetCoordinate
   75 000002FC                 EXTERN           TxByte
   76 000002FC                 EXTERN           OutStrNokia
   77 000002FC                 EXTERN           ClearNokia
   78 000002FC         ;----------------------------------
   79 000002FC         ; ADC functions
   80 000002FC         ;----------------------------------
   81 000002FC                 EXTERN           ADC_1_Read_Y
   82 000002FC                 EXTERN           ADC_0_Read_X
   83 000002FC                 EXTERN           Find_Pixel_Coordinate
   84 000002FC                 EXTERN           ADC_Init
   85 000002FC         ;----------------------------------
   86 000002FC         ; PORT-F Button functions
   87 000002FC         ;----------------------------------
   88 000002FC                 EXTERN           PortF_Button_Init
   89 000002FC                 EXTERN           Check_Interrupt_Status
   90 000002FC                 EXTERN           Clear_Interrupt_Status
   91 000002FC         ;----------------------------------



ARM Macro Assembler    Page 8 


   92 000002FC         ; Timer functions
   93 000002FC         ;----------------------------------
   94 000002FC                 EXTERN           WideTimer0A_Handler
   95 000002FC                 EXTERN           WideTimer0B_Handler
   96 000002FC                 EXTERN           Timers_Init
   97 000002FC                 EXTERN           Enable_Timers
   98 000002FC         
   99 000002FC                 EXPORT           Start
  100 000002FC                 EXPORT           Set_Coordinates_Mine
  101 000002FC         
  102 000002FC         Start
  103 000002FC F7FF FFFE       BL               Nokia_Init  ; initialize LCD
  104 00000300 F7FF FFFE       BL               Timers_Init ; initialize LCD
  105 00000304 F7FF FFFE       BL               ADC_Init    ; initialize ADC
  106 00000308 F7FF FFFE       BL               PortF_Button_Init ; initialize 
                                                            buttons
  107 0000030C B662            CPSIE            I
  108 0000030E E7FF            B                Clear_Ship_Memories ; clear shi
                                                            p memories
  109 00000310         
  110 00000310         Clear_Ship_Memories
  111 00000310 F04F 0204       MOV              R2, #4      ; counter to clear 
                                                            16 bytes
  112 00000314 4B1C            LDR              R3, = Memory_Battleship ; battl
                                                            eship memory addres
                                                            s
  113 00000316         Clear_Battleship_Memory
  114 00000316 F04F 0400       MOV              R4, #0x00000000
  115 0000031A F843 4B04       STR              R4, [R3], #4
  116 0000031E 3A01            SUBS             R2, #1
  117 00000320 D1F9            BNE              Clear_Battleship_Memory
  118 00000322 F04F 0204       MOV              R2, #4      ; counter to clear 
                                                            16 bytes
  119 00000326 4B19            LDR              R3, = Memory_Civilianship ; bat
                                                            tleship memory addr
                                                            ess
  120 00000328         Clear_Civilianship_Memory
  121 00000328 F04F 0400       MOV              R4, #0x00000000
  122 0000032C F843 4B04       STR              R4, [R3], #4
  123 00000330 3A01            SUBS             R2, #1
  124 00000332 D1F9            BNE              Clear_Civilianship_Memory
  125 00000334 F04F 0204       MOV              R2, #4      ; counter to clear 
                                                            16 bytes
  126 00000338 4B15            LDR              R3, = Memory_Mine ; battleship 
                                                            memory address
  127 0000033A         Clear_Mine_Memory
  128 0000033A F04F 0400       MOV              R4, #0x00000000
  129 0000033E F843 4B04       STR              R4, [R3], #4
  130 00000342 3A01            SUBS             R2, #1
  131 00000344 D1F9            BNE              Clear_Mine_Memory
  132 00000346 F04F 0204       MOV              R2, #4      ; counter to clear 
                                                            16 bytes
  133 0000034A 4B12            LDR              R3, = Memory_TimerFinish ; batt
                                                            leship memory addre
                                                            ss
  134 0000034C         Clear_TimerFinish_Memory
  135 0000034C F04F 0400       MOV              R4, #0x00000000
  136 00000350 F843 4B04       STR              R4, [R3], #4
  137 00000354 3A01            SUBS             R2, #1



ARM Macro Assembler    Page 9 


  138 00000356 D1F9            BNE              Clear_TimerFinish_Memory
  139 00000358         
  140 00000358         
  141 00000358         
  142 00000358         loadRam
  143 00000358         
  144 00000358         ; output initial first run messages
  145 00000358         Initial_Messages
  146 00000358 F04F 0000       MOV              R0, #0
  147 0000035C F04F 0101       MOV              R1, #1
  148 00000360 F7FF FFFE       BL               SetCoordinate
  149 00000364 4D0C            LDR              R5,=MSG_InitialRun
  150 00000366 F7FF FFFE       BL               OutStrNokia
  151 0000036A F000 F9F0       BL               delay
  152 0000036E F7FF FFFE       BL               ClearNokia
  153 00000372 F04F 0000       MOV              R0, #0
  154 00000376 F04F 0101       MOV              R1, #1
  155 0000037A F7FF FFFE       BL               SetCoordinate
  156 0000037E 4D07            LDR              R5,=MSG_Welcome
  157 00000380 F7FF FFFE       BL               OutStrNokia
  158 00000384 F000 F9E3       BL               delay
  159 00000388         
  160 00000388         ; load game border
  161 00000388         Load_GameBorder
  162 00000388 20000700 
              20000734 
              20000768 
              2000079C 
              00000000 
              00000000         ltorg
  163 000003A0 E7FF            B                next
  164 000003A2         next
  165 000003A2 4DF9            LDR              R5,=gameplayBorder
  166 000003A4 F7FF FFFE       BL               OutImgNokia
  167 000003A8 F04F 0A63       MOV              R10, #99    ; old x coordinate
  168 000003AC F04F 0B63       MOV              R11, #99    ; old y coordinate 
                                                            
  169 000003B0 F04F 0200       MOV              R2, #0      ; difference counte
                                                            r
  170 000003B4 F04F 0600       MOV              R6, #0      ; ship counter
  171 000003B8         
  172 000003B8         Set_Coordinates
  173 000003B8         ;BL delayTrans
  174 000003B8 F000 F886       BL               Placement_Battleship_Output ; p
                                                            rint battleships wh
                                                            ile deployment
  175 000003BC F000 F899       BL               Placement_Civilianship_Output ;
                                                             print civilianship
                                                            s while deployment
  176 000003C0         ;BL Clear_Interrupt_Status ; clear button interrupts
  177 000003C0 2E04            CMP              R6, #4      ; check if all ship
                                                            s are deployed
  178 000003C2 D034            BEQ              Placement_Done
  179 000003C4 F04F 0000       MOV              R0, #0      ; clear x-coordinat
                                                            e
  180 000003C8 F04F 0100       MOV              R1, #0      ; clear y-coordinat
                                                            e
  181 000003CC F04F 0200       MOV              R2, #0      ; reset counter
  182 000003D0 F7FF FFFE       BL               ADC_0_Read_X



ARM Macro Assembler    Page 10 


  183 000003D4 F04F 0338       MOV              R3, #56
  184 000003D8 F7FF FFFE       BL               Find_Pixel_Coordinate 
                                                            ; x-coordinae
  185 000003DC F7FF FFFE       BL               ADC_1_Read_Y
  186 000003E0 F240 3339       MOV              R3, #825
  187 000003E4 F7FF FFFE       BL               Find_Pixel_Coordinate
  188 000003E8 F100 0006       ADD              R0, R0, #6  ; add x axis offset
                                                            
  189 000003EC F101 0101       ADD              R1, R1, #1  ; add y axis offset
                                                            
  190 000003F0 4550            CMP              R0, R10     ; check if x coordi
                                                            nate has changed
  191 000003F2 BF18 3201       ADDNE            R2, #1
  192 000003F6 4559            CMP              R1, R11     ; check if y coordi
                                                            nate has changed
  193 000003F8 BF18 3201       ADDNE            R2, #1
  194 000003FC 2A00            CMP              R2, #0      ; if R2 == 0, then 
                                                            coordinates remaine
                                                            d same, check again
                                                            
  195 000003FE         ; if R2 != 0, then at least one of the coordinates
  196 000003FE         ; have changed
  197 000003FE D000            BEQ              Go_Check_Ship_Placement ; !!!!!
                                                            !!!!!!!!!!!!!!!!!!!
                                                            !!!!!!!
  198 00000400 E002            B                Clear_Old_Cursor
  199 00000402         Go_Check_Ship_Placement
  200 00000402 F000 F81C       BL               Check_Ship_Placement
  201 00000406 E7D7            B                Set_Coordinates
  202 00000408         
  203 00000408         ;-------------------------------------------
  204 00000408         ; Clears the position of old cursor by writing
  205 00000408         ; 0 pixels on top of it.
  206 00000408         ; Saves the new cursor coordinates
  207 00000408         ;-------------------------------------------
  208 00000408         Clear_Old_Cursor
  209 00000408 B407            PUSH{R0-R2}                  ; save new coordina
                                                            tes
  210 0000040A 4650            MOV              R0, R10     ; old x coordinate
  211 0000040C 4659            MOV              R1, R11     ; old y coordinate
  212 0000040E F7FF FFFE       BL               SetCoordinate
  213 00000412 4DDE            LDR              R5,=MSG_Clear_Cursor
  214 00000414 F7FF FFFE       BL               OutStrNokia
  215 00000418 BC07            POP{R0-R2}                   ; pop new coordinat
                                                            es
  216 0000041A 4682            MOV              R10, R0     ; save change
  217 0000041C 468B            MOV              R11, R1     ; save change
  218 0000041E F7FF FFFE       BL               SetCoordinate
  219 00000422 E7FF            B                Move_Cursor
  220 00000424         Move_Cursor
  221 00000424 4DDA            LDR              R5,=MSG_Cursor
  222 00000426 F7FF FFFE       BL               OutStrNokia
  223 0000042A         ; BL delayTrans
  224 0000042A E7C5            B                Set_Coordinates
  225 0000042C E7FE    donethis
                               B                donethis
  226 0000042E         
  227 0000042E         ;-------------------------------------------
  228 0000042E         ; Let's user to have an overview of the



ARM Macro Assembler    Page 11 


  229 0000042E         ; deployed ships. No placement is allowed.
  230 0000042E         ; Press both buttons to handover the turn.
  231 0000042E         ; All preused registers can be reset from now on,
  232 0000042E         ; because the game phase is going to change
  233 0000042E         ;-------------------------------------------
  234 0000042E         Placement_Done
  235 0000042E F7FF FFFE       BL               Check_Interrupt_Status ; R9 has
                                                             interrupt status
  236 00000432 F1B9 0F11       CMP              R9, #0x11   ; if R9 == 0x11, us
                                                            er wants handover t
                                                            o
  237 00000436         ; other player
  238 00000436         ; Otherwise wait for 0x11.
  239 00000436 D1FA            BNE              Placement_Done
  240 00000438 F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  241 0000043C E06E            B                Wait_for_Second_Player
  242 0000043E         
  243 0000043E         ;-------------------------------------------
  244 0000043E         ; Checks if a ship is to be placed
  245 0000043E         ; if yes, then saves the ship to memory
  246 0000043E         ; if not, returns back
  247 0000043E         ;-------------------------------------------
  248 0000043E         Check_Ship_Placement
  249 0000043E B500            PUSH{LR}
  250 00000440 F7FF FFFE       BL               Check_Interrupt_Status ; R9 has
                                                             interrupt status
  251 00000444 F1B9 0F00       CMP              R9, #0x00   ; if R9 == 0x00, th
                                                            ere is no ship plac
                                                            ement
  252 00000448 D102            BNE              Determine_Ship_Type
  253 0000044A F85D EB04       POP{LR}
  254 0000044E 4770            BX               LR
  255 00000450         ;-------------------------------------------
  256 00000450         ; Checks which ship type is deployed.
  257 00000450         ; Redirects to save subroutine of respective ship
  258 00000450         ;-------------------------------------------
  259 00000450         Determine_Ship_Type
  260 00000450 F000 F98F       BL               delayTrans2
  261 00000454 4FCF            LDR              R7, =GPIO_PORTF_DATA_R
  262 00000456 F8D7 9000       LDR              R9, [R7]
  263 0000045A F1B9 0F10       CMP              R9, #0x10   ; if R9 == 0x10, pl
                                                            ace a batlleship
  264 0000045E         ; if R9 < 0x10, place a civilianship
  265 0000045E         ; if R9 > 0x10, ship placement is done
  266 0000045E D01D            BEQ              Placement_Civilianship_Save
  267 00000460 F1B9 0F01       CMP              R9, #0x01
  268 00000464 D004            BEQ              Placement_Battleship_Save
  269 00000466 F7FF FFFE       BL               Clear_Interrupt_Status ; R9 has
                                                             interrupt status
  270 0000046A F85D EB04       POP{LR}
  271 0000046E 4770            BX               LR
  272 00000470         
  273 00000470         ; B Placement_Done
  274 00000470         
  275 00000470         ;-------------------------------------------
  276 00000470         ; Saves the location of battleship
  277 00000470         ;-------------------------------------------
  278 00000470         Placement_Battleship_Save



ARM Macro Assembler    Page 12 


  279 00000470 E92D 1FBF       PUSH{R0-R5,R7-R12}
  280 00000474 F106 0601       ADD              R6, R6, #1  ; increase the ship
                                                             count
  281 00000478 4BC7            LDR              R3, = Memory_Battleship
  282 0000047A         Find_Battleship_Zero_Memory
  283 0000047A F813 4B02       LDRB             R4, [R3], #2
  284 0000047E 2C00            CMP              R4, #0
  285 00000480 D1FB            BNE              Find_Battleship_Zero_Memory
  286 00000482 F1A3 0302       SUB              R3, R3, #2
  287 00000486 F803 0B01       STRB             R0, [R3], #1 ; store x coordina
                                                            te of the ship
  288 0000048A F803 1B01       STRB             R1, [R3], #1 ; store y coordina
                                                            te of the ship
  289 0000048E F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  290 00000492 E8BD 1FBF       POP{R0-R5,R7-R12}
  291 00000496 F85D EB04       POP{LR}
  292 0000049A 4770            BX               LR          ; return to last ca
                                                            ll of Check_Ship_Pl
                                                            acement
  293 0000049C         
  294 0000049C         ;-------------------------------------------
  295 0000049C         ; Saves the location of civilianship
  296 0000049C         ;-------------------------------------------
  297 0000049C         Placement_Civilianship_Save
  298 0000049C E92D 1FBF       PUSH{R0-R5,R7-R12}
  299 000004A0 F106 0601       ADD              R6, R6, #1  ; increase the ship
                                                             count
  300 000004A4 4BBD            LDR              R3, = Memory_Civilianship
  301 000004A6         Find_Civilianship_Zero_Memory
  302 000004A6 F813 4B02       LDRB             R4, [R3], #2
  303 000004AA 2C00            CMP              R4, #0
  304 000004AC D1FB            BNE              Find_Civilianship_Zero_Memory
  305 000004AE F1A3 0302       SUB              R3, R3, #2
  306 000004B2 F803 0B01       STRB             R0, [R3], #1 ; store x coordina
                                                            te of the ship
  307 000004B6 F803 1B01       STRB             R1, [R3], #1 ; store y coordina
                                                            te of the ship
  308 000004BA F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  309 000004BE E8BD 1FBF       POP{R0-R5,R7-R12}
  310 000004C2 F85D EB04       POP{LR}
  311 000004C6 4770            BX               LR          ; return to last ca
                                                            ll of Check_Ship_Pl
                                                            acement
  312 000004C8         
  313 000004C8         ;-------------------------------------------
  314 000004C8         ; Outputs all battleships
  315 000004C8         ; Returns nothing
  316 000004C8         ; If there is no ships, doesn't output at all.
  317 000004C8         ;-------------------------------------------
  318 000004C8         Placement_Battleship_Output
  319 000004C8 E92D 1FBF       PUSH{R0-R5,R7-R12}
  320 000004CC B500            PUSH{LR}
  321 000004CE 4BB2            LDR              R3, = Memory_Battleship ; battl
                                                            eship memory addres
                                                            s
  322 000004D0         Output_Battleship
  323 000004D0 F813 0B01       LDRB             R0, [R3], #1 ; load x coordinat



ARM Macro Assembler    Page 13 


                                                            e of the ship
  324 000004D4 2800            CMP              R0, #0
  325 000004D6 D007            BEQ              Placement_Battleship_Output_Ret
urn 
                                                            ; if R0 == 0, then 
                                                            it is end of battle
                                                            ships
  326 000004D8         ; return 
  327 000004D8 F813 1B01       LDRB             R1, [R3], #1 ; load y coordinat
                                                            e of the ship
  328 000004DC F7FF FFFE       BL               SetCoordinate
  329 000004E0 4DAF            LDR              R5, = MSG_Battleship
  330 000004E2 F7FF FFFE       BL               OutStrNokia
  331 000004E6         ;BL delayTrans
  332 000004E6 E7F3            B                Output_Battleship ; loop throug
                                                            h all battleships 
  333 000004E8         Placement_Battleship_Output_Return
  334 000004E8 F85D EB04       POP{LR}
  335 000004EC E8BD 1FBF       POP{R0-R5,R7-R12}
  336 000004F0 4770            BX               LR
  337 000004F2         
  338 000004F2         ;-------------------------------------------
  339 000004F2         ; Outputs all battleships
  340 000004F2         ; Returns nothing
  341 000004F2         ; If there is no ships, doesn't output at all.
  342 000004F2         ;-------------------------------------------
  343 000004F2         Placement_Civilianship_Output
  344 000004F2 E92D 1FFF       PUSH{R0-R12}
  345 000004F6 B500            PUSH{LR}
  346 000004F8 4BA8            LDR              R3, = Memory_Civilianship ; bat
                                                            tleship memory addr
                                                            ess
  347 000004FA         Output_Civilianship
  348 000004FA F813 0B01       LDRB             R0, [R3], #1 ; load x coordinat
                                                            e of the ship
  349 000004FE 2800            CMP              R0, #0
  350 00000500 D007            BEQ              Placement_Civilianship_Output_R
eturn 
                                                            ; if R0 == 0, then 
                                                            it is end of battle
                                                            ships
  351 00000502         ; return 
  352 00000502 F813 1B01       LDRB             R1, [R3], #1 ; load y coordinat
                                                            e of the ship
  353 00000506 F7FF FFFE       BL               SetCoordinate
  354 0000050A 4DA6            LDR              R5, = MSG_Civilianship
  355 0000050C F7FF FFFE       BL               OutStrNokia
  356 00000510         ;BL delayTrans
  357 00000510 E7F3            B                Output_Civilianship ; loop thro
                                                            ugh all battleships
                                                            
  358 00000512         Placement_Civilianship_Output_Return
  359 00000512 F85D EB04       POP{LR}
  360 00000516 E8BD 1FFF       POP{R0-R12}
  361 0000051A 4770            BX               LR
  362 0000051C         ;************************ SECOND PLAYER PHASE **********
                       **************
  363 0000051C         Wait_for_Second_Player
  364 0000051C F7FF FFFE       BL               Clear_Interrupt_Status ; clear 



ARM Macro Assembler    Page 14 


                                                            button interrupts
  365 00000520 F7FF FFFE       BL               ClearNokia
  366 00000524 4DA0            LDR              R5, = MSG_WaitUser2 ; output pr
                                                            ompt message
  367 00000526 F7FF FFFE       BL               OutStrNokia
  368 0000052A         Wait_for_Second_Player_Interrupt
  369 0000052A F7FF FFFE       BL               Check_Interrupt_Status ; R9 has
                                                             interrupt status
  370 0000052E F1B9 0F11       CMP              R9, #0x11   ; if R9 == 0x11, us
                                                            er2 wants to start 
                                                            mine placement
  371 00000532         ; otherwise, wait for user2 to concentrate on.
  372 00000532 D1FA            BNE              Wait_for_Second_Player_Interrup
t
  373 00000534 F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  374 00000538 E7FF            B                Place_Mines_Init
  375 0000053A         
  376 0000053A         Place_Mines_Init
  377 0000053A         ; clear all registers
  378 0000053A F04F 0000       MOV              R0, #0
  379 0000053E F04F 0100       MOV              R1, #0
  380 00000542 F04F 0200       MOV              R2, #0
  381 00000546 F04F 0300       MOV              R3, #0
  382 0000054A F04F 0400       MOV              R4, #0
  383 0000054E F04F 0500       MOV              R5, #0
  384 00000552 F04F 0600       MOV              R6, #0
  385 00000556 F04F 0700       MOV              R7, #0
  386 0000055A F04F 0800       MOV              R8, #0
  387 0000055E F04F 0900       MOV              R9, #0
  388 00000562 F04F 0A00       MOV              R10, #0
  389 00000566 F04F 0B00       MOV              R11, #0
  390 0000056A F04F 0C00       MOV              R12, #0
  391 0000056E F7FF FFFE       BL               Enable_Timers
  392 00000572 F7FF FFFE       BL               ClearNokia  ; clear the screen
  393 00000576 4D84            LDR              R5,=gameplayBorder
  394 00000578 F7FF FFFE       BL               OutImgNokia ; output the border
                                                            
  395 0000057C F7FF FFA4       BL               Placement_Battleship_Output ; p
                                                            rint battleships wh
                                                            ile deployment
  396 00000580 F7FF FFB7       BL               Placement_Civilianship_Output ;
                                                             print civilianship
                                                            s while deployment
  397 00000584 F04F 0400       MOV              R4, #0
  398 00000588 F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts
  399 0000058C         Wait_Mine_Interrupt
  400 0000058C 2C01            CMP              R4, #1
  401 0000058E D1FD            BNE              Wait_Mine_Interrupt
  402 00000590         
  403 00000590         Set_Coordinates_Mine
  404 00000590 4B86            LDR              R3, = Memory_TimerFinish
  405 00000592 F893 C000       LDRB             R12, [R3]
  406 00000596 F1BC 0F01       CMP              R12, #0x1
  407 0000059A D025            BEQ              TimeIs_Up
  408 0000059C         ;BL delayTrans
  409 0000059C F000 F86C       BL               Placement_Mine_Output ; print b
                                                            attleships while de



ARM Macro Assembler    Page 15 


                                                            ployment
  410 000005A0         ;BL Placement_Civilianship_Output ; print civilianships 
                       while deployment
  411 000005A0         ;BL Clear_Interrupt_Status ; clear button interrupts
  412 000005A0 2E04            CMP              R6, #4      ; check if all ship
                                                            s are deployed
  413 000005A2 D07E            BEQ              Mine_Done
  414 000005A4 F04F 0000       MOV              R0, #0      ; clear x-coordinat
                                                            e
  415 000005A8 F04F 0100       MOV              R1, #0      ; clear y-coordinat
                                                            e
  416 000005AC F04F 0200       MOV              R2, #0      ; reset counter
  417 000005B0 F7FF FFFE       BL               ADC_0_Read_X
  418 000005B4 F04F 0338       MOV              R3, #56
  419 000005B8 F7FF FFFE       BL               Find_Pixel_Coordinate 
                                                            ; x-coordinae
  420 000005BC F7FF FFFE       BL               ADC_1_Read_Y
  421 000005C0 F240 3339       MOV              R3, #825
  422 000005C4 F7FF FFFE       BL               Find_Pixel_Coordinate
  423 000005C8 F100 0006       ADD              R0, R0, #6  ; add x axis offset
                                                            
  424 000005CC F101 0101       ADD              R1, R1, #1  ; add y axis offset
                                                            
  425 000005D0 4550            CMP              R0, R10     ; check if x coordi
                                                            nate has changed
  426 000005D2 BF18 3201       ADDNE            R2, #1
  427 000005D6 4559            CMP              R1, R11     ; check if y coordi
                                                            nate has changed
  428 000005D8 BF18 3201       ADDNE            R2, #1
  429 000005DC 2A00            CMP              R2, #0      ; if R2 == 0, then 
                                                            coordinates remaine
                                                            d same, check again
                                                            
  430 000005DE         ; if R2 != 0, then at least one of the coordinates
  431 000005DE         ; have changed
  432 000005DE         ;BEQ Go_Check_Ship_Placement; !!!!!!!!!!!!!!!!!!!!!!!!!!
                       !!!!!
  433 000005DE D000            BEQ              Go_Mine_Placement ; !!!!!!!!!!!
                                                            !!!!!!!!!!!!!!!!!!!
                                                            !
  434 000005E0 E00C            B                Clear_Old_MineCursor
  435 000005E2         Go_Mine_Placement
  436 000005E2 F000 F81D       BL               Check_Mine_Placement
  437 000005E6 E7FE            B                Set_Coordinates_Mine
  438 000005E8         
  439 000005E8         TimeIs_Up
  440 000005E8 F04F 000A       MOV              R0, #10
  441 000005EC F04F 0102       MOV              R1, #2
  442 000005F0 F7FF FFFE       BL               SetCoordinate
  443 000005F4 4D6E            LDR              R5,=MSG_TimerFinish
  444 000005F6 F7FF FFFE       BL               OutStrNokia
  445 000005FA E097            B                WIN_Done
  446 000005FC         Clear_Old_MineCursor
  447 000005FC B407            PUSH{R0-R2}                  ; save new coordina
                                                            tes
  448 000005FE 4650            MOV              R0, R10     ; old x coordinate
  449 00000600 4659            MOV              R1, R11     ; old y coordinate
  450 00000602 F7FF FFFE       BL               SetCoordinate
  451 00000606 4D61            LDR              R5,=MSG_Clear_Cursor



ARM Macro Assembler    Page 16 


  452 00000608 F7FF FFFE       BL               OutStrNokia
  453 0000060C BC07            POP{R0-R2}                   ; pop new coordinat
                                                            es
  454 0000060E 4682            MOV              R10, R0     ; save change
  455 00000610 468B            MOV              R11, R1     ; save change
  456 00000612 F7FF FFFE       BL               SetCoordinate
  457 00000616 E7FF            B                Move_Cursor_Mine
  458 00000618         Move_Cursor_Mine
  459 00000618 4D5D            LDR              R5,=MSG_Cursor
  460 0000061A F7FF FFFE       BL               OutStrNokia
  461 0000061E         ; BL delayTrans
  462 0000061E E7FE            B                Set_Coordinates_Mine
  463 00000620         
  464 00000620         ;-------------------------------------------
  465 00000620         ; Checks if a ship is to be placed
  466 00000620         ; if yes, then saves the ship to memory
  467 00000620         ; if not, returns back
  468 00000620         ;-------------------------------------------
  469 00000620         Check_Mine_Placement
  470 00000620 B500            PUSH{LR}
  471 00000622 F7FF FFFE       BL               Check_Interrupt_Status ; R9 has
                                                             interrupt status
  472 00000626 F1B9 0F00       CMP              R9, #0x00   ; if R9 == 0x00, th
                                                            ere is no ship plac
                                                            ement
  473 0000062A D102            BNE              Mine_Placement
  474 0000062C F85D EB04       POP{LR}
  475 00000630 4770            BX               LR
  476 00000632         
  477 00000632         Mine_Placement
  478 00000632 F000 F89E       BL               delayTrans2
  479 00000636 4F57            LDR              R7, =GPIO_PORTF_DATA_R
  480 00000638 F8D7 9000       LDR              R9, [R7]
  481 0000063C F1B9 0F11       CMP              R9, #0x11   ; if R9 == 0x10, pl
                                                            ace a batlleship
  482 00000640         ; if R9 < 0x10, place a civilianship
  483 00000640         ; if R9 > 0x10, ship placement is done
  484 00000640 D304            BLO              Placement_Mine_Save
  485 00000642 F7FF FFFE       BL               Clear_Interrupt_Status ; R9 has
                                                             interrupt status
  486 00000646 F85D EB04       POP{LR}
  487 0000064A 4770            BX               LR
  488 0000064C         
  489 0000064C         Placement_Mine_Save
  490 0000064C E92D 1FBF       PUSH{R0-R5,R7-R12}
  491 00000650 F106 0601       ADD              R6, R6, #1  ; increase the ship
                                                             count
  492 00000654 4B57            LDR              R3, = Memory_Mine
  493 00000656         Find_Mine_Zero_Memory
  494 00000656 F813 4B02       LDRB             R4, [R3], #2
  495 0000065A 2C00            CMP              R4, #0
  496 0000065C D1FB            BNE              Find_Mine_Zero_Memory
  497 0000065E F1A3 0302       SUB              R3, R3, #2
  498 00000662 F803 0B01       STRB             R0, [R3], #1 ; store x coordina
                                                            te of the ship
  499 00000666 F803 1B01       STRB             R1, [R3], #1 ; store y coordina
                                                            te of the ship
  500 0000066A F7FF FFFE       BL               Clear_Interrupt_Status ; clear 
                                                            button interrupts



ARM Macro Assembler    Page 17 


  501 0000066E E8BD 1FBF       POP{R0-R5,R7-R12}
  502 00000672 F85D EB04       POP{LR}
  503 00000676 4770            BX               LR          ; return to last ca
                                                            ll of Check_Ship_Pl
                                                            acement
  504 00000678         
  505 00000678         Placement_Mine_Output
  506 00000678 E92D 1FFF       PUSH{R0-R12}
  507 0000067C B500            PUSH{LR}
  508 0000067E 4B4D            LDR              R3, = Memory_Mine ; battleship 
                                                            memory address
  509 00000680         Output_Mine
  510 00000680 F813 0B01       LDRB             R0, [R3], #1 ; load x coordinat
                                                            e of the ship
  511 00000684 2800            CMP              R0, #0
  512 00000686 D007            BEQ              Placement_Mine_Output_Return ; 
                                                            if R0 == 0, then it
                                                             is end of battlesh
                                                            ips
  513 00000688         ; return 
  514 00000688 F813 1B01       LDRB             R1, [R3], #1 ; load y coordinat
                                                            e of the ship
  515 0000068C F7FF FFFE       BL               SetCoordinate
  516 00000690 4D49            LDR              R5, = MSG_Mine
  517 00000692 F7FF FFFE       BL               OutStrNokia
  518 00000696         ;BL delayTrans
  519 00000696 E7F3            B                Output_Mine ; loop through all 
                                                            battleships
  520 00000698         Placement_Mine_Output_Return
  521 00000698 F85D EB04       POP{LR}
  522 0000069C E8BD 1FFF       POP{R0-R12}
  523 000006A0 4770            BX               LR
  524 000006A2         
  525 000006A2         
  526 000006A2         Mine_Done
  527 000006A2 F04F 0C04       MOV              R12, #4     ; column counter
  528 000006A6 F85F 8318       LDR              R8, = Memory_Mine ; battleship 
                                                            memory address
  529 000006AA F04F 0900       MOV              R9, #0      ; hit counter
  530 000006AE         LOOP
  531 000006AE F1BC 0F00       CMP              R12, #0     ; check mine counte
                                                            r
  532 000006B2 D02E            BEQ              Game_Finish
  533 000006B4 F1AC 0C01       SUB              R12, #1
  534 000006B8 F818 0B01       LDRB             R0, [R8], #1 ; load x coordinat
                                                            e of the ship
  535 000006BC F818 1B01       LDRB             R1, [R8], #1 ; load y coordinat
                                                            e of the ship
  536 000006C0         
  537 000006C0 4B36            LDR              R3, = Memory_Civilianship ; bat
                                                            tleship memory addr
                                                            ess
  538 000006C2         LOOP_Civilian
  539 000006C2 F813 6B01       LDRB             R6, [R3], #1 ; load x coordinat
                                                            e of the ship
  540 000006C6 2E00            CMP              R6, #0
  541 000006C8 D00B            BEQ              LOOP_Battle_C
  542 000006CA F106 0602       ADD              R6, R6, #2
  543 000006CE F813 7B01       LDRB             R7, [R3], #1 ; load y coordinat



ARM Macro Assembler    Page 18 


                                                            e of the ship
  544 000006D2 42B9            CMP              R1, R7      ; check b==y
  545 000006D4 D1F5            BNE              LOOP_Civilian
  546 000006D6 4286            CMP              R6, R0      ; check x>a
  547 000006D8 D3F3            BLO              LOOP_Civilian
  548 000006DA 1A36            SUBS             R6,R6,R0
  549 000006DC 2E04            CMP              R6, #4
  550 000006DE DD28            BLE              FAIL
  551 000006E0 E7EF            B                LOOP_Civilian
  552 000006E2         
  553 000006E2         LOOP_Battle_C
  554 000006E2 4B2D            LDR              R3, = Memory_Battleship ; battl
                                                            eship memory addres
                                                            s
  555 000006E4         
  556 000006E4 F04F 0400       MOV              R4, #0      ; battleship counte
                                                            r
  557 000006E8         LOOP_Battle
  558 000006E8 F813 6B01       LDRB             R6, [R3], #1 ; load x coordinat
                                                            e of the ship
  559 000006EC 2E00            CMP              R6, #0
  560 000006EE D0DE            BEQ              LOOP
  561 000006F0 F104 0401       ADD              R4, #1
  562 000006F4 F106 0602       ADD              R6, R6, #2
  563 000006F8 F813 7B01       LDRB             R7, [R3], #1 ; load y coordinat
                                                            e of the ship
  564 000006FC 42B9            CMP              R1, R7      ; check b==y
  565 000006FE D1F3            BNE              LOOP_Battle
  566 00000700 4286            CMP              R6, R0      ; check x>a
  567 00000702 D3F1            BLO              LOOP_Battle
  568 00000704 1A36            SUBS             R6,R6,R0
  569 00000706 2E04            CMP              R6, #4
  570 00000708 D8EE            BHI              LOOP_Battle
  571 0000070A F109 0901       ADD              R9, R9, #1
  572 0000070E E7EB            B                LOOP_Battle
  573 00000710         
  574 00000710         
  575 00000710 E7C7            B                Mine_Done
  576 00000712         
  577 00000712         
  578 00000712         
  579 00000712         Game_Finish
  580 00000712 454C            CMP              R4, R9
  581 00000714 D80D            BHI              FAIL
  582 00000716 F7FF FFFE       BL               ClearNokia
  583 0000071A F04F 0000       MOV              R0, #0
  584 0000071E F04F 0101       MOV              R1, #1
  585 00000722 F7FF FFFE       BL               SetCoordinate
  586 00000726 4D25            LDR              R5,=MSG_WIN
  587 00000728 F7FF FFFE       BL               OutStrNokia
  588 0000072C         WIN_Done
  589 0000072C F000 F818       BL               delay3
  590 00000730 E7FE            B                Start
  591 00000732         
  592 00000732         
  593 00000732         FAIL
  594 00000732 F7FF FFFE       BL               ClearNokia
  595 00000736 F04F 0000       MOV              R0, #0
  596 0000073A F04F 0101       MOV              R1, #1



ARM Macro Assembler    Page 19 


  597 0000073E F7FF FFFE       BL               SetCoordinate
  598 00000742 4D1F            LDR              R5,=MSG_FAIL
  599 00000744 F7FF FFFE       BL               OutStrNokia
  600 00000748         FAIL_Done
  601 00000748 F000 F80A       BL               delay3
  602 0000074C E7FE            B                Start
  603 0000074E         
  604 0000074E         
  605 0000074E         
  606 0000074E         
  607 0000074E         ;   BL  delay    ; leave image for a few s
  608 0000074E         
  609 0000074E         ;   MOV       ; reset XY position to 0,0
  610 0000074E         ;   MOV       ; using setXY routine
  611 0000074E         ; BL  SetCoordinate   ; DC is left high ready to send da
                       ta
  612 0000074E         ; transition to CSU           
  613 0000074E         ; MOV  R0,#504    ; 504 bytes in full image
  614 0000074E         ; LDR  R1,=imgCSU   ; put img address in R1
  615 0000074E         ;sendNxtCSUByte  
  616 0000074E         ; ;   LDRB     ; load R5 with byte, post inc addr
  617 0000074E         ; BL  TxByte   ; use byte routine
  618 0000074E         ; BL  delayTrans   ; slow down loading of next byte
  619 0000074E         ; SUBS R0,#1
  620 0000074E         ; BNE  sendNxtCSUByte
  621 0000074E         
  622 0000074E         ; BL  delay    ; leave image for a few s
  623 0000074E         
  624 0000074E         ;;clear screen using ClearNokia routine
  625 0000074E         ; BL  ClearNokia
  626 0000074E         
  627 0000074E         
  628 0000074E         ; ;   MOV       ; X pos (0-83)
  629 0000074E         ; ;   MOV       ; Y pos (0-5)
  630 0000074E         ; BL  SetCoordinate   ; set XY position
  631 0000074E         ; LDR  R5,=MSG_Cursor
  632 0000074E         ; BL  OutStrNokia
  633 0000074E         
  634 0000074E         ; BL  delay    ; leave text up
  635 0000074E         ;  
  636 0000074E         ;done  B  loadRam    ; loop   
  637 0000074E         ; 
  638 0000074E         ; 
  639 0000074E         delay
  640 0000074E B401            PUSH             {R0}
  641 00000750 F248 5055       MOV              R0,#0x8555
  642 00000754 F2C0 1040       MOVT             R0,#0x0140
  643 00000758         del
  644 00000758 3801            SUBS             R0,#1
  645 0000075A D1FD            BNE              del
  646 0000075C BC01            POP              {R0}
  647 0000075E 4770            BX               LR
  648 00000760         
  649 00000760         delay3
  650 00000760 B401            PUSH             {R0}
  651 00000762 F248 5055       MOV              R0,#0x8555
  652 00000766 F2C0 3040       MOVT             R0,#0x0340
  653 0000076A         del3
  654 0000076A 3801            SUBS             R0,#1



ARM Macro Assembler    Page 20 


  655 0000076C D1FD            BNE              del3
  656 0000076E BC01            POP              {R0}
  657 00000770 4770            BX               LR
  658 00000772         
  659 00000772         
  660 00000772         
  661 00000772         ;delayTrans PUSH {R0}
  662 00000772         ; MOV  R0,#0xF55   ;~250ms, 0x5855
  663 00000772         ;; MOVT R0,#0x0001
  664 00000772         ;dt   
  665 00000772         ; SUBS R0,#1
  666 00000772         ; BNE  dt
  667 00000772         ; POP  {R0}
  668 00000772         ; BX  LR
  669 00000772         
  670 00000772 B501    delayTrans2
                               PUSH             {R0,LR}
  671 00000774 F643 0055       MOV              R0,#0x3855  ;~250ms, 0x5855
  672 00000778 F2C0 0014       MOVT             R0,#0x0014
  673 0000077C         dt2
  674 0000077C 3801            SUBS             R0,#1
  675 0000077E D1FD            BNE              dt2
  676 00000780 E8BD 4001       POP              {R0,LR}
  677 00000784 4770            BX               LR
  678 00000786         
  679 00000786         
  680 00000786 00 00           ALIGN
  681 00000788                 END
              00000000 
              00000000 
              00000000 
              40025044 
              20000700 
              20000734 
              00000000 
              00000000 
              00000000 
              2000079C 
              00000000 
              20000768 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_EE447-Project -ID:
\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -ID:\Keil_v5\ARM\C
MSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 52
6" --predefine="TM4C123GH6PM SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 10 in file main.s
   Uses
      None
Comment: .text unused
Check_Mine_Placement 00000620

Symbol: Check_Mine_Placement
   Definitions
      At line 469 in file main.s
   Uses
      At line 436 in file main.s
Comment: Check_Mine_Placement used once
Check_Ship_Placement 0000043E

Symbol: Check_Ship_Placement
   Definitions
      At line 248 in file main.s
   Uses
      At line 200 in file main.s
Comment: Check_Ship_Placement used once
Clear_Battleship_Memory 00000316

Symbol: Clear_Battleship_Memory
   Definitions
      At line 113 in file main.s
   Uses
      At line 117 in file main.s
Comment: Clear_Battleship_Memory used once
Clear_Civilianship_Memory 00000328

Symbol: Clear_Civilianship_Memory
   Definitions
      At line 120 in file main.s
   Uses
      At line 124 in file main.s
Comment: Clear_Civilianship_Memory used once
Clear_Mine_Memory 0000033A

Symbol: Clear_Mine_Memory
   Definitions
      At line 127 in file main.s
   Uses
      At line 131 in file main.s
Comment: Clear_Mine_Memory used once
Clear_Old_Cursor 00000408

Symbol: Clear_Old_Cursor
   Definitions
      At line 208 in file main.s
   Uses
      At line 198 in file main.s
Comment: Clear_Old_Cursor used once
Clear_Old_MineCursor 000005FC

Symbol: Clear_Old_MineCursor



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 446 in file main.s
   Uses
      At line 434 in file main.s
Comment: Clear_Old_MineCursor used once
Clear_Ship_Memories 00000310

Symbol: Clear_Ship_Memories
   Definitions
      At line 110 in file main.s
   Uses
      At line 108 in file main.s
Comment: Clear_Ship_Memories used once
Clear_TimerFinish_Memory 0000034C

Symbol: Clear_TimerFinish_Memory
   Definitions
      At line 134 in file main.s
   Uses
      At line 138 in file main.s
Comment: Clear_TimerFinish_Memory used once
Determine_Ship_Type 00000450

Symbol: Determine_Ship_Type
   Definitions
      At line 259 in file main.s
   Uses
      At line 252 in file main.s
Comment: Determine_Ship_Type used once
FAIL 00000732

Symbol: FAIL
   Definitions
      At line 593 in file main.s
   Uses
      At line 550 in file main.s
      At line 581 in file main.s

FAIL_Done 00000748

Symbol: FAIL_Done
   Definitions
      At line 600 in file main.s
   Uses
      None
Comment: FAIL_Done unused
Find_Battleship_Zero_Memory 0000047A

Symbol: Find_Battleship_Zero_Memory
   Definitions
      At line 282 in file main.s
   Uses
      At line 285 in file main.s
Comment: Find_Battleship_Zero_Memory used once
Find_Civilianship_Zero_Memory 000004A6

Symbol: Find_Civilianship_Zero_Memory
   Definitions
      At line 301 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 304 in file main.s
Comment: Find_Civilianship_Zero_Memory used once
Find_Mine_Zero_Memory 00000656

Symbol: Find_Mine_Zero_Memory
   Definitions
      At line 493 in file main.s
   Uses
      At line 496 in file main.s
Comment: Find_Mine_Zero_Memory used once
Game_Finish 00000712

Symbol: Game_Finish
   Definitions
      At line 579 in file main.s
   Uses
      At line 532 in file main.s
Comment: Game_Finish used once
Go_Check_Ship_Placement 00000402

Symbol: Go_Check_Ship_Placement
   Definitions
      At line 199 in file main.s
   Uses
      At line 197 in file main.s
Comment: Go_Check_Ship_Placement used once
Go_Mine_Placement 000005E2

Symbol: Go_Mine_Placement
   Definitions
      At line 435 in file main.s
   Uses
      At line 433 in file main.s
Comment: Go_Mine_Placement used once
Initial_Messages 00000358

Symbol: Initial_Messages
   Definitions
      At line 145 in file main.s
   Uses
      None
Comment: Initial_Messages unused
LOOP 000006AE

Symbol: LOOP
   Definitions
      At line 530 in file main.s
   Uses
      At line 560 in file main.s
Comment: LOOP used once
LOOP_Battle 000006E8

Symbol: LOOP_Battle
   Definitions
      At line 557 in file main.s
   Uses
      At line 565 in file main.s
      At line 567 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 570 in file main.s
      At line 572 in file main.s

LOOP_Battle_C 000006E2

Symbol: LOOP_Battle_C
   Definitions
      At line 553 in file main.s
   Uses
      At line 541 in file main.s
Comment: LOOP_Battle_C used once
LOOP_Civilian 000006C2

Symbol: LOOP_Civilian
   Definitions
      At line 538 in file main.s
   Uses
      At line 545 in file main.s
      At line 547 in file main.s
      At line 551 in file main.s

Load_GameBorder 00000388

Symbol: Load_GameBorder
   Definitions
      At line 161 in file main.s
   Uses
      None
Comment: Load_GameBorder unused
MSG_Battleship 000001FA

Symbol: MSG_Battleship
   Definitions
      At line 58 in file main.s
   Uses
      At line 329 in file main.s
Comment: MSG_Battleship used once
MSG_Civilianship 000001FC

Symbol: MSG_Civilianship
   Definitions
      At line 59 in file main.s
   Uses
      At line 354 in file main.s
Comment: MSG_Civilianship used once
MSG_Clear_Cursor 00000200

Symbol: MSG_Clear_Cursor
   Definitions
      At line 61 in file main.s
   Uses
      At line 213 in file main.s
      At line 451 in file main.s

MSG_Cursor 000001F8

Symbol: MSG_Cursor
   Definitions
      At line 57 in file main.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 221 in file main.s
      At line 459 in file main.s

MSG_FAIL 000002BE

Symbol: MSG_FAIL
   Definitions
      At line 65 in file main.s
   Uses
      At line 598 in file main.s
Comment: MSG_FAIL used once
MSG_InitialRun 00000202

Symbol: MSG_InitialRun
   Definitions
      At line 62 in file main.s
   Uses
      At line 149 in file main.s
Comment: MSG_InitialRun used once
MSG_Mine 000001FE

Symbol: MSG_Mine
   Definitions
      At line 60 in file main.s
   Uses
      At line 516 in file main.s
Comment: MSG_Mine used once
MSG_TimerFinish 000002F0

Symbol: MSG_TimerFinish
   Definitions
      At line 67 in file main.s
   Uses
      At line 443 in file main.s
Comment: MSG_TimerFinish used once
MSG_WIN 000002E0

Symbol: MSG_WIN
   Definitions
      At line 66 in file main.s
   Uses
      At line 586 in file main.s
Comment: MSG_WIN used once
MSG_WaitUser2 0000026B

Symbol: MSG_WaitUser2
   Definitions
      At line 64 in file main.s
   Uses
      At line 366 in file main.s
Comment: MSG_WaitUser2 used once
MSG_Welcome 00000240

Symbol: MSG_Welcome
   Definitions
      At line 63 in file main.s
   Uses
      At line 156 in file main.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: MSG_Welcome used once
Mine_Done 000006A2

Symbol: Mine_Done
   Definitions
      At line 526 in file main.s
   Uses
      At line 413 in file main.s
      At line 575 in file main.s

Mine_Placement 00000632

Symbol: Mine_Placement
   Definitions
      At line 477 in file main.s
   Uses
      At line 473 in file main.s
Comment: Mine_Placement used once
Move_Cursor 00000424

Symbol: Move_Cursor
   Definitions
      At line 220 in file main.s
   Uses
      At line 219 in file main.s
Comment: Move_Cursor used once
Move_Cursor_Mine 00000618

Symbol: Move_Cursor_Mine
   Definitions
      At line 458 in file main.s
   Uses
      At line 457 in file main.s
Comment: Move_Cursor_Mine used once
Output_Battleship 000004D0

Symbol: Output_Battleship
   Definitions
      At line 322 in file main.s
   Uses
      At line 332 in file main.s
Comment: Output_Battleship used once
Output_Civilianship 000004FA

Symbol: Output_Civilianship
   Definitions
      At line 347 in file main.s
   Uses
      At line 357 in file main.s
Comment: Output_Civilianship used once
Output_Mine 00000680

Symbol: Output_Mine
   Definitions
      At line 509 in file main.s
   Uses
      At line 519 in file main.s
Comment: Output_Mine used once
Place_Mines_Init 0000053A



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


Symbol: Place_Mines_Init
   Definitions
      At line 376 in file main.s
   Uses
      At line 374 in file main.s
Comment: Place_Mines_Init used once
Placement_Battleship_Output 000004C8

Symbol: Placement_Battleship_Output
   Definitions
      At line 318 in file main.s
   Uses
      At line 174 in file main.s
      At line 395 in file main.s

Placement_Battleship_Output_Return 000004E8

Symbol: Placement_Battleship_Output_Return
   Definitions
      At line 333 in file main.s
   Uses
      At line 325 in file main.s
Comment: Placement_Battleship_Output_Return used once
Placement_Battleship_Save 00000470

Symbol: Placement_Battleship_Save
   Definitions
      At line 278 in file main.s
   Uses
      At line 268 in file main.s
Comment: Placement_Battleship_Save used once
Placement_Civilianship_Output 000004F2

Symbol: Placement_Civilianship_Output
   Definitions
      At line 343 in file main.s
   Uses
      At line 175 in file main.s
      At line 396 in file main.s

Placement_Civilianship_Output_Return 00000512

Symbol: Placement_Civilianship_Output_Return
   Definitions
      At line 358 in file main.s
   Uses
      At line 350 in file main.s
Comment: Placement_Civilianship_Output_Return used once
Placement_Civilianship_Save 0000049C

Symbol: Placement_Civilianship_Save
   Definitions
      At line 297 in file main.s
   Uses
      At line 266 in file main.s
Comment: Placement_Civilianship_Save used once
Placement_Done 0000042E




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Symbol: Placement_Done
   Definitions
      At line 234 in file main.s
   Uses
      At line 178 in file main.s
      At line 239 in file main.s

Placement_Mine_Output 00000678

Symbol: Placement_Mine_Output
   Definitions
      At line 505 in file main.s
   Uses
      At line 409 in file main.s
Comment: Placement_Mine_Output used once
Placement_Mine_Output_Return 00000698

Symbol: Placement_Mine_Output_Return
   Definitions
      At line 520 in file main.s
   Uses
      At line 512 in file main.s
Comment: Placement_Mine_Output_Return used once
Placement_Mine_Save 0000064C

Symbol: Placement_Mine_Save
   Definitions
      At line 489 in file main.s
   Uses
      At line 484 in file main.s
Comment: Placement_Mine_Save used once
Set_Coordinates 000003B8

Symbol: Set_Coordinates
   Definitions
      At line 172 in file main.s
   Uses
      At line 201 in file main.s
      At line 224 in file main.s

Set_Coordinates_Mine 00000590

Symbol: Set_Coordinates_Mine
   Definitions
      At line 403 in file main.s
   Uses
      At line 100 in file main.s
      At line 437 in file main.s
      At line 462 in file main.s

Start 000002FC

Symbol: Start
   Definitions
      At line 102 in file main.s
   Uses
      At line 99 in file main.s
      At line 590 in file main.s
      At line 602 in file main.s



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols


TimeIs_Up 000005E8

Symbol: TimeIs_Up
   Definitions
      At line 439 in file main.s
   Uses
      At line 407 in file main.s
Comment: TimeIs_Up used once
WIN_Done 0000072C

Symbol: WIN_Done
   Definitions
      At line 588 in file main.s
   Uses
      At line 445 in file main.s
Comment: WIN_Done used once
Wait_Mine_Interrupt 0000058C

Symbol: Wait_Mine_Interrupt
   Definitions
      At line 399 in file main.s
   Uses
      At line 401 in file main.s
Comment: Wait_Mine_Interrupt used once
Wait_for_Second_Player 0000051C

Symbol: Wait_for_Second_Player
   Definitions
      At line 363 in file main.s
   Uses
      At line 241 in file main.s
Comment: Wait_for_Second_Player used once
Wait_for_Second_Player_Interrupt 0000052A

Symbol: Wait_for_Second_Player_Interrupt
   Definitions
      At line 368 in file main.s
   Uses
      At line 372 in file main.s
Comment: Wait_for_Second_Player_Interrupt used once
del 00000758

Symbol: del
   Definitions
      At line 643 in file main.s
   Uses
      At line 645 in file main.s
Comment: del used once
del3 0000076A

Symbol: del3
   Definitions
      At line 653 in file main.s
   Uses
      At line 655 in file main.s
Comment: del3 used once
delay 0000074E




ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

Symbol: delay
   Definitions
      At line 639 in file main.s
   Uses
      At line 151 in file main.s
      At line 158 in file main.s

delay3 00000760

Symbol: delay3
   Definitions
      At line 649 in file main.s
   Uses
      At line 589 in file main.s
      At line 601 in file main.s

delayTrans2 00000772

Symbol: delayTrans2
   Definitions
      At line 670 in file main.s
   Uses
      At line 260 in file main.s
      At line 478 in file main.s

donethis 0000042C

Symbol: donethis
   Definitions
      At line 225 in file main.s
   Uses
      At line 225 in file main.s
Comment: donethis used once
dt2 0000077C

Symbol: dt2
   Definitions
      At line 673 in file main.s
   Uses
      At line 675 in file main.s
Comment: dt2 used once
gameplayBorder 00000000

Symbol: gameplayBorder
   Definitions
      At line 13 in file main.s
   Uses
      At line 165 in file main.s
      At line 393 in file main.s

loadRam 00000358

Symbol: loadRam
   Definitions
      At line 142 in file main.s
   Uses
      None
Comment: loadRam unused
next 000003A2



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols


Symbol: next
   Definitions
      At line 164 in file main.s
   Uses
      At line 163 in file main.s
Comment: next used once
72 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DATA_R 40025044

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 8 in file main.s
   Uses
      At line 261 in file main.s
      At line 479 in file main.s

Memory_Battleship 20000700

Symbol: Memory_Battleship
   Definitions
      At line 4 in file main.s
   Uses
      At line 112 in file main.s
      At line 281 in file main.s
      At line 321 in file main.s
      At line 554 in file main.s

Memory_Civilianship 20000734

Symbol: Memory_Civilianship
   Definitions
      At line 5 in file main.s
   Uses
      At line 119 in file main.s
      At line 300 in file main.s
      At line 346 in file main.s
      At line 537 in file main.s

Memory_Mine 20000768

Symbol: Memory_Mine
   Definitions
      At line 6 in file main.s
   Uses
      At line 126 in file main.s
      At line 492 in file main.s
      At line 508 in file main.s
      At line 528 in file main.s

Memory_TimerFinish 2000079C

Symbol: Memory_TimerFinish
   Definitions
      At line 7 in file main.s
   Uses
      At line 133 in file main.s
      At line 404 in file main.s

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ADC_0_Read_X 00000000

Symbol: ADC_0_Read_X
   Definitions
      At line 82 in file main.s
   Uses
      At line 182 in file main.s
      At line 417 in file main.s

ADC_1_Read_Y 00000000

Symbol: ADC_1_Read_Y
   Definitions
      At line 81 in file main.s
   Uses
      At line 185 in file main.s
      At line 420 in file main.s

ADC_Init 00000000

Symbol: ADC_Init
   Definitions
      At line 84 in file main.s
   Uses
      At line 105 in file main.s
Comment: ADC_Init used once
Check_Interrupt_Status 00000000

Symbol: Check_Interrupt_Status
   Definitions
      At line 89 in file main.s
   Uses
      At line 235 in file main.s
      At line 250 in file main.s
      At line 369 in file main.s
      At line 471 in file main.s

ClearNokia 00000000

Symbol: ClearNokia
   Definitions
      At line 77 in file main.s
   Uses
      At line 152 in file main.s
      At line 365 in file main.s
      At line 392 in file main.s
      At line 582 in file main.s
      At line 594 in file main.s

Clear_Interrupt_Status 00000000

Symbol: Clear_Interrupt_Status
   Definitions
      At line 90 in file main.s
   Uses
      At line 240 in file main.s
      At line 269 in file main.s
      At line 289 in file main.s
      At line 308 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 364 in file main.s
      At line 373 in file main.s
      At line 398 in file main.s
      At line 485 in file main.s
      At line 500 in file main.s

Enable_Timers 00000000

Symbol: Enable_Timers
   Definitions
      At line 97 in file main.s
   Uses
      At line 391 in file main.s
Comment: Enable_Timers used once
Find_Pixel_Coordinate 00000000

Symbol: Find_Pixel_Coordinate
   Definitions
      At line 83 in file main.s
   Uses
      At line 184 in file main.s
      At line 187 in file main.s
      At line 419 in file main.s
      At line 422 in file main.s

Nokia_Init 00000000

Symbol: Nokia_Init
   Definitions
      At line 72 in file main.s
   Uses
      At line 103 in file main.s
Comment: Nokia_Init used once
OutImgNokia 00000000

Symbol: OutImgNokia
   Definitions
      At line 73 in file main.s
   Uses
      At line 166 in file main.s
      At line 394 in file main.s

OutStrNokia 00000000

Symbol: OutStrNokia
   Definitions
      At line 76 in file main.s
   Uses
      At line 150 in file main.s
      At line 157 in file main.s
      At line 214 in file main.s
      At line 222 in file main.s
      At line 330 in file main.s
      At line 355 in file main.s
      At line 367 in file main.s
      At line 444 in file main.s
      At line 452 in file main.s
      At line 460 in file main.s
      At line 517 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 587 in file main.s
      At line 599 in file main.s

PortF_Button_Init 00000000

Symbol: PortF_Button_Init
   Definitions
      At line 88 in file main.s
   Uses
      At line 106 in file main.s
Comment: PortF_Button_Init used once
SetCoordinate 00000000

Symbol: SetCoordinate
   Definitions
      At line 74 in file main.s
   Uses
      At line 148 in file main.s
      At line 155 in file main.s
      At line 212 in file main.s
      At line 218 in file main.s
      At line 328 in file main.s
      At line 353 in file main.s
      At line 442 in file main.s
      At line 450 in file main.s
      At line 456 in file main.s
      At line 515 in file main.s
      At line 585 in file main.s
      At line 597 in file main.s

Timers_Init 00000000

Symbol: Timers_Init
   Definitions
      At line 96 in file main.s
   Uses
      At line 104 in file main.s
Comment: Timers_Init used once
TxByte 00000000

Symbol: TxByte
   Definitions
      At line 75 in file main.s
   Uses
      None
Comment: TxByte unused
WideTimer0A_Handler 00000000

Symbol: WideTimer0A_Handler
   Definitions
      At line 94 in file main.s
   Uses
      None
Comment: WideTimer0A_Handler unused
WideTimer0B_Handler 00000000

Symbol: WideTimer0B_Handler
   Definitions
      At line 95 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

   Uses
      None
Comment: WideTimer0B_Handler unused
17 symbols
432 symbols in table
